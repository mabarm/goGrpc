package main

import (
	"log"
	"net"

	pb "github.com/mabarm/goGrpc/proto"
	"google.golang.org/grpc"
)

const (
	port = ":8080"
)

type helloServer struct {
	pb.GreetServiceServer
}

func main() {
	lis, err := net.Listen("tcp", port)

	if err != nil {
		log.Fatalf("Failed to start the server %v", err)
	}

	grpcServer := grpc.NewServer()
	pb.RegisterGreetServiceServer(grpcServer, &helloServer{})
	log.Printf("Server started at %v", lis.Addr())

	if err := grpcServer.Serve(lis); err != nil {
		log.Fatalf("Failed to start grpcServer %v", err)
	}

}

/*
Explanation of key parts:
Imports:

"log": Handles logging errors and informational messages.
"net": Handles network connections (specifically, TCP for this example).
"google.golang.org/grpc": Imports gRPC to create the RPC server.
"github.com/mabarm/goGrpc/proto": Imports the generated protobuf code.
Constants:

port: Defines the port number the server will listen on (:8080).
helloServer Struct:

Implements the GreetServiceServer interface (generated by the protobuf) and is responsible for providing the actual functionality of the gRPC service.
main function:

Sets up a TCP listener on the defined port.
Creates and registers the gRPC server, using the implementation of the helloServer.
The server listens for incoming gRPC connections and logs any startup or failure messages.
*/
